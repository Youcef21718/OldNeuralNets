import numpy as np
import math

#Y = np.array([[0,0,1,0], [1,0,0,0]])
Y = np.random.rand(2,4)

def softmax(M):
    M0 = np.exp(M)
    M1 = np.dot(np.reshape(np.sum(M0, axis=1), (2,1)), np.array([[1,1,1,1]]))
    M2 = M0/M1
    return M2

A = np.array([[ 0.06749876,  0.57280537,  0.81610796],
       [ 0.51609013,  0.27607922,  0.46975043]])

W = np.array([[ 0.48234606,  0.34398025,  0.12041662,  0.19607436],
       [ 0.5942337 ,  0.09684389,  0.32244241,  0.63169907],
       [ 0.66500136,  0.17018339,  0.53969114,  0.40571426]])

B = np.array([[ 0.74301839,  0.23314429,  0.83373407,  0.92007906],
       [ 0.30940004,  0.56377236,  0.80670867,  0.71568502]])

M = np.dot(A,W)+B

S = softmax(M)
J = np.sum(0.5*(S-Y)*(S-Y))

Jac0 = np.zeros((4,4))
for i in range(4):
    for j in range(4):
        if(i==j):
            Jac0[i][j] = S[0][i]*(1-S[0][i])
        else:
            Jac0[i][j] = -S[0][i]*S[0][j]

Jac1 = np.zeros((4,4))
for i in range(4):
    for j in range(4):
        if(i==j):
            Jac1[i][j] = S[1][i]*(1-S[1][i])
        else:
            Jac1[i][j] = -S[1][i]*S[1][j]

dS = np.zeros((2,4))
dS[0] = np.dot((S-Y)[0], Jac0)
dS[1] = np.dot((S-Y)[1], Jac1)
dJ = np.dot( np.transpose(A), dS)

h = 0.0001

djdW = np.zeros((3,4))
for i in range(3):
    for j in range(4):
        Wn = W.copy()
        Wn[i][j] = W[i][j]+h
        Mn = np.dot(A,Wn)+B

        Sn = softmax(Mn)
        Jn = np.sum(0.5*(Sn-Y)*(Sn-Y))

        djdW[i][j] = (Jn-J)/h

dJ
djdW

djdB = np.zeros((2,4))
for i in range (2):
    for j in range(4):
        Bn = B.copy()
        Bn[i][j] = B[i][j]+h
        Mn = np.dot(A,W)+Bn
        
        Sn = softmax(Mn)
        Jn = np.sum(0.5*(Sn-Y)*(Sn-Y))

        djdB[i][j] = (Jn-J)/h

dS
djdB







